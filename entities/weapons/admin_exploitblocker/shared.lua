if SERVER then
	AddCSLuaFile( "shared.lua" )
end

SWEP.PrintName = "Exploit Blocker Tool"
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true
SWEP.ViewModelFOV = 70
SWEP.ViewModelFlip = false
SWEP.CSMuzzleFlashes = false
SWEP.Author	= ""
SWEP.Slot = 4
SWEP.SlotPos = 4
SWEP.Contact = "None"
SWEP.Purpose = "None"
SWEP.Instructions = "None"

SWEP.ViewModel	= Model ( "models/weapons/c_toolgun.mdl" )//"models/weapons/v_toolgun.mdl"
SWEP.WorldModel	= Model ( "models/weapons/w_toolgun.mdl" )

SWEP.Spawnable = false
SWEP.AdminSpawnable	= true

SWEP.UseHands = true

SWEP.Primary.Recoil	= 2
SWEP.Primary.Unrecoil = 7
SWEP.Primary.ClipSize = -1
SWEP.Primary.Damage = 0
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"
SWEP.Primary.Delay = 0.5
SWEP.Primary.Cone = 0
SWEP.ConeMoving	= 0
SWEP.ConeCrouching = 0

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo	= "none"
SWEP.Secondary.Delay = 0.3

SWEP.HoldType = "pistol"
SWEP.Primary.Sound = Sound( "buttons/button9.wav" )

SWEP.Modes = { 
	[1] = { "Default" }, -- block's position is always near you
	[2] = { "Trace HitPos" }, -- block's position will be placed where you are looking
}

if SERVER then
	util.AddNetworkString( "DD.ExploitBlockerUpdate" )
	function SWEP:UpdateClient()
		
		net.Start( "DD.ExploitBlockerUpdate" )
			net.WriteTable( MapExploits )
		net.Send( self.Owner )
		
		/*for k,v in ipairs ( MapExploits ) do
			umsg.Start( "umsg_exploit_update", self.Owner )
				umsg.Bool( ( k == 1 ) )
				umsg.Short( k )
				umsg.Vector( v.origin )
				umsg.Short( v.bsize )
			umsg.End()
		end*/
	end
end

if CLIENT then
	net.Receive( "DD.ExploitBlockerUpdate", function( len )
		MapExploits = MapExploits or {}
		MapExploits = net.ReadTable()
	end)
	/*usermessage.Hook( "umsg_exploit_update", function( msg )
		local First = msg:ReadBool()
		if ( First ) then
			MapExploits = {}
		end
		
		local Index = msg:ReadShort()
		local Pos = msg:ReadVector()
		local Size = msg:ReadShort()
		
		MapExploits[Index] = { origin = Pos, bsize = Size }
	end )*/
end

function SWEP:Initialize()

end

local function GiveExploitBlocker(pl,cmg,args)
	if not pl:IsAdmin() then return end
	
	pl:Give("admin_exploitblocker")
	
end
if SERVER then concommand.Add( "map_giveexploitblocker", GiveExploitBlocker ) end

local function SaveExploits ( pl, cmd, args )
	if not pl:IsAdmin() then return end
	
	local Tool = pl:GetWeapon ( "admin_exploitblocker" )
	if Tool == nil then return end
	
	GAMEMODE:MapExploitWrite()
	pl:ChatPrint( "[TOOL] Saved blocks in: 'data/darkestdays/exploits/"..game.GetMap()..".txt'" )	
	
end
if SERVER then concommand.Add( "map_saveexploits", SaveExploits ) end

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire( CurTime() + self.Primary.Delay )

	local pos = self.Owner:GetAimVector()
	if SERVER then
		table.insert( MapExploits, { origin = self.Origin, bsize = self:GetDTInt( 0 ) or 0 } )
		self:UpdateClient()
	end
	
	if SERVER then
		self.Owner:ChatPrint( "[TOOL] Placed block at: "..tostring( self.Origin ).." with size: "..self:GetDTInt( 0 ) or 0 )
	end
	
	self:EmitSound( self.Primary.Sound )
	
	self.Owner:SetAnimation( PLAYER_ATTACK1 )
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
end

function SWEP:SecondaryAttack()
	return false
end
SWEP.SwitchTimer = 0
SWEP.SizeTimer = 0
function SWEP:Think()
	
	local Mode = self:GetDTInt( 1 )//self:GetNetworkedInt ( "Mode" )

	if Mode == 1 then
		self.Origin = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 84
	elseif Mode == 2 then
		self.Origin = self.Owner:GetEyeTrace().HitPos + Vector(0,0,self:GetDTInt( 0 )-10)
	end
	
	
	
	
	if SERVER then
		if self.SizeTimer < CurTime() then
			if self.Owner:KeyDown( IN_ATTACK2 ) then
				self:SetDTInt( 0, ( self:GetDTInt( 0 ) or 0 ) + 1 )
			elseif self.Owner:KeyDown( IN_USE ) then
				self:SetDTInt( 0, ( self:GetDTInt( 0 ) or 0 ) - 1 )
			end
		end

	end
	
	//if SERVER then
			if self.Owner:KeyPressed( IN_WALK ) then
				if CLIENT then
					self.NextSave = self.NextSave or 0
					if self.NextSave < CurTime() then
						gui.EnableScreenClicker ( true )
						Derma_Query("Are you sure you want to save all exploit boxes to file?", "Warning!","Yes", function() RunConsoleCommand( "map_saveexploits" ) timer.Simple ( 0.2, function () Derma_Query("You have saved the points to gmod/data/darkestdays/exploits/mapname.txt", "Way to go!","Continue", function() gui.EnableScreenClicker ( false ) end ) end) end, "No", function() gui.EnableScreenClicker ( false ) end)
						self.NextSave = CurTime() + 3
					end
				end
				//GAMEMODE:MapExploitWrite()
				//self.Owner:ChatPrint( "[TOOL] Saved blocks in: 'data/darkestdays/exploits/"..game.GetMap()..".txt'" )	
			end	
		//end
	
	if SERVER then
		if self.Owner:KeyPressed (IN_SCORE) then
			if self.SwitchTimer > CurTime() then return end
		
				if Mode <= 2 then
					Mode = Mode + 1
				end
				
				if Mode > 2 then
					Mode = 1
				end
				
				self:SetDTInt( 1, Mode )
				//self:SetNetworkedInt ( "Mode", Mode )
				self.SwitchTimer = CurTime() + 0.3
		end
	end
end

SWEP.TimerReload = 0
function SWEP:Reload()
	if CurTime() < self.TimerReload then return end
	
	if #MapExploits <= 0 then 
		self.Owner:ChatPrint( "-- You haven't placed any blocks yet! --" )
		self.TimerReload = CurTime() + 0.5
		
		return 
	end
	
	local count = 0
	local tokeep = {}
	for k, v in pairs( MapExploits ) do
		if v.origin:Distance( self.Owner:GetPos() + self.Owner:GetAimVector() * 84 ) < 128 then
			count = count + 1
		else
			table.insert( tokeep,v )
		end
	end
	
	MapExploits = tokeep
	
	if CLIENT then
		if count == 0 then
			self.Owner:ChatPrint( "-- No blocks nearby! --" )
		else
			self.Owner:ChatPrint( "-- Deleted "..count.." nearby block(s) --" )
		end
	end
	
	self.TimerReload = CurTime() + 0.5	
end

function SWEP:Holster( wep )
	return true
end 

/*-------------------------------------------------------------------------
	Called when you make it active 
--------------------------------------------------------------------------*/
function SWEP:Deploy()
	self:SetDTInt( 0, 32 )
	self:SetDTInt( 1, 2 )
	//self:SetNetworkedInt ( "Mode", 1 )
	self.Origin = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 84
	
	//Initialize exploits table if not
	MapExploits = MapExploits or {}
	self:SendWeaponAnim( ACT_VM_DRAW )

	if SERVER then 
		local owner = self.Owner
		local effectdata = EffectData()
		effectdata:SetEntity(owner)
		effectdata:SetOrigin(owner:GetShootPos() + owner:GetAimVector() * 32)
		util.Effect("exploit_blocker_ghost", effectdata, true, true)
		self:UpdateClient()
	end
	
	return true
end 

if CLIENT then

local forward = Vector( 1, 0, 0 )
local right = Vector( 0, 1, 0 )
local up = Vector( 0, 0, 1 )

local mat = Material( "vgui/gradient_up" )

local function DrawExploitBlock( pos, size, col )

	render.SetMaterial( mat )
	//top
	render.DrawQuadEasy( pos + up * size, up, size * 2, size * 2, col, 0 )
	//bottom
	render.DrawQuadEasy( pos - up * size, up * -1, size * 2, size * 2, col, 0 )
	//front
	render.DrawQuadEasy( pos + forward * size, forward * 1, size * 2, size * 2, col, 0 )
	//back
	render.DrawQuadEasy( pos - forward * size, forward * -1, size * 2, size * 2, col, 0 )
	//right
	render.DrawQuadEasy( pos + right * size, right * 1, size * 2, size * 2, col, 0 )
	//left
	render.DrawQuadEasy( pos - right * size, right * -1, size * 2, size * 2, col, 0 )

end

function SWEP:DrawHUD()
	if not self.Owner:Alive() then return end
	if ENDROUND then return end
	
	cam.Start3D( EyePos(), EyeAngles() )
	
		/*local size = self:GetDTInt( 0 ) or 0
		//render.DrawWireframeBox( self.Origin, Angle( 0, 0, 0 ), Vector( -size, -size, -size), Vector( size, size, size), Color( 0, 255, 0 ), false ) 
		DrawExploitBlock( self.Origin, size,Color( 0, 255, 0 ) )*/
		local size = self:GetDTInt( 0 ) or 0
		render.DrawWireframeBox( self.Origin, Angle( 0, 0, 0 ), Vector( -size, -size, -size), Vector( size, size, size), Color( 0, 255, 0 ), false ) 
	
		if MapExploits then
			
			for k, v in pairs( MapExploits ) do
				render.DrawWireframeBox( v.origin, Angle( 0, 0, 0 ), Vector( -v.bsize, -v.bsize, -v.bsize), Vector( v.bsize, v.bsize, v.bsize), Color( 255, 0, 0 ), false )
			end
		
		end
	
	cam.End3D()
	
	local screen
	
	if MapExploits then	
		for k, v in pairs( MapExploits ) do
			screen = v.origin:ToScreen()
			draw.SimpleText( "- Block "..k.." | Size: "..v.bsize, "default", screen.x, screen.y, Color(255,0,0), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	
	screen = self.Origin:ToScreen()
	draw.SimpleText( "- New Block  | Size: "..self:GetDTInt( 0 ), "default", screen.x, screen.y, Color(0,255,0), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	
	/*local points = {}
	local screen = nil

	local blocklist = table.Copy( MapExploits )
	table.insert( blocklist, { origin = self.Origin, bsize = self:GetDTInt( 0 ) or 0, current = true } )

	for k, v in pairs(blocklist) do
		screen = v.origin:ToScreen()
		points = {}
		//if screen.x > 0 and screen.x < w and screen.y > 0 and screen.y < h then
			table.insert(points, (v.origin+Vector(v.bsize,v.bsize,v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(-v.bsize,v.bsize,v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(-v.bsize,-v.bsize,v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(v.bsize,-v.bsize,v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(v.bsize,v.bsize,-v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(-v.bsize,v.bsize,-v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(-v.bsize,-v.bsize,-v.bsize)):ToScreen())
			table.insert(points, (v.origin+Vector(v.bsize,-v.bsize,-v.bsize)):ToScreen())

			draw.SimpleText( "- Block "..k.." | Size: "..v.bsize, "default", screen.x, screen.y, Color(255,0,0), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			if not v.current then 
				surface.SetDrawColor(Color(255,0,0))
			else
				surface.SetDrawColor( Color( 0,255,0 ) )
			end
			
			for k, v in pairs( points ) do
			
				--draws a block
				if k % 4 == 0 then
					surface.DrawLine(v.x,v.y,points[k-3].x,points[k-3].y)
				else
					surface.DrawLine(v.x,v.y,points[k+1].x,points[k+1].y)
				end
				
				if k <= 4 then
					surface.DrawLine(v.x,v.y,points[k+4].x,points[k+4].y)
				end
			end
		//end		
	end*/
	
	local Mode = self:GetDTInt( 1 )//self:GetNetworkedInt ( "Mode" )
	local Description1 = "Left mouse to place, Tab to change mode. Current mode: "..self.Modes[Mode][1]
	local Description2 = "USE to shrink, RMB to grow"
	local Description3 = "R to delete nearby boxes. ALT to save."

	surface.SetFont ( "Arial_Bold_20" )
	local DescWide1 = surface.GetTextSize ( Description1 )
	local DescWide2 = surface.GetTextSize ( Description2 )
	local DescWide3 = surface.GetTextSize ( Description3 )

	local BoxWide = math.max ( DescWide1, DescWide2, DescWide3 ) + ScaleW(50)

	draw.RoundedBox ( 8, ScaleW(673) - BoxWide * 0.5, ScaleH(761) - ScaleH(117) * 0.5, BoxWide, ScaleH(117), Color ( 1,1,1,180 ) )
	draw.SimpleTextOutlined( Description1,"Arial_Bold_20",ScaleW(673),ScaleH(726), Color ( 240,240,240,255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER,1,Color(0,0,0,255))
	draw.SimpleTextOutlined( Description2 ,"Arial_Bold_20",ScaleW(673),ScaleH(756), Color ( 240,240,240,255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER,1,Color(0,0,0,255) )
	draw.SimpleTextOutlined( Description3 ,"Arial_Bold_20",ScaleW(673),ScaleH(788), Color ( 240,240,240,255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER,1,Color(0,0,0,255) )
	
end

end
