
function EFFECT:Init( data )

	self.pos = data:GetOrigin()
	self.size = data:GetRadius()
	self.ent = data:GetEntity()
	
	self.DieTime = CurTime() + 2
	
	self:SetRenderBounds( Vector( -self.size, -self.size, -self.size ), Vector( self.size, self.size, self.size ) )
	
end

function EFFECT:Think()
	return self.DieTime and self.DieTime > CurTime()
end

//local mat = Material( "effects/combineshield/comshieldwall" )
local mat = Material( "vgui/gradient_up" )

local forward = Vector( 1, 0, 0 )
local right = Vector( 0, 1, 0 )
local up = Vector( 0, 0, 1 )

function EFFECT:Render()

	if self.pos and self.size and self.ent and self.ent == MySelf then
		
		local alpha = math.Clamp( ( self.DieTime - CurTime() ) / 2, 0, 1)  * 255
		
		render.SetMaterial( mat )
		//top
		render.DrawQuadEasy( self.pos + up * self.size, up, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		//bottom
		render.DrawQuadEasy( self.pos - up * self.size, up * -1, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		//front
		render.DrawQuadEasy( self.pos + forward * self.size, forward * 1, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		//back
		render.DrawQuadEasy( self.pos - forward * self.size, forward * -1, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		//right
		render.DrawQuadEasy( self.pos + right * self.size, right * 1, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		//left
		render.DrawQuadEasy( self.pos - right * self.size, right * -1, self.size * 2, self.size * 2, Color( 255, 0, 0, alpha ), 0 )
		
		
	end

end